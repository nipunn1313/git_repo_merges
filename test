#!/bin/bash
set -eu
set -o pipefail

die() {
    echo
    echo "Oh no!  Something failed."
    echo >&2 FAIL
    exit 1
}

trap 'die' EXIT

this_file="$(readlink -f "${BASH_SOURCE[0]}")"
root_dir="${this_file%/*}"

tmpdir="$(mktemp -d)"
cd "${tmpdir}"

testci() {
    local name="${1}"
    echo "${name}" >"${name}" \
      && git add "${name}" \
      && git commit -m "${name}"
}

export CHILD=child_git_repo
export PARENT=main_git_repo
export SUBDIR=child_dir

git init "${CHILD}"
cd "${CHILD}"
testci a
mkdir d
testci d/b
git remote add origin .
git fetch origin
cd ..

git init "${PARENT}"
cd "${PARENT}"
testci x
testci y
git remote add "${CHILD}" ../"${CHILD}"
cd ..

# Horrible hack to skip the BFG step,
# to simplify crude initial testing.
mkdir bin
cat >bin/java <<EOF
#!/bin/sh
exec true
EOF
chmod +x bin/java
PATH="${tmpdir}/bin${PATH+:${PATH}}"

# Since Git 2.24, `git filter-branch` prints a warning suggesting
# there are spiffy new alternatives you might use instead, notably:
#   https://github.com/newren/git-filter-repo/
#
# For an actual user of the main merge script, they should probably
# look at the warning and consider the spiffy new alternatives!  So
# the script doesn't try to suppress it.
#
# For this test script, though, the warning is just a nuisance.
# Squelch it, following the instruction in the warning itself.
export FILTER_BRANCH_SQUELCH_WARNING=1

"${root_dir}"/git_to_git_merge.sh

cd "${PARENT}"

expect() {
    diff -c --color=always --label=expected --label=actual /dev/fd/3 -
}

git ls-files | expect 3<<EOF
${SUBDIR}/a
${SUBDIR}/d/b
x
y
EOF

git log --format=%s master^ | expect 3<<EOF
y
x
EOF

git ls-tree --name-only -r master^ | expect 3<<EOF
x
y
EOF

git log --format=%s master^2 | expect 3<<EOF
d/b
a
EOF

git ls-tree --name-only -r master^2 | expect 3<<EOF
${SUBDIR}/a
${SUBDIR}/d/b
EOF

cd /
rm -rf -- "${tmpdir}"

echo
echo "Tests passed!"

trap - EXIT
